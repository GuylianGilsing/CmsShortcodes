<?php
namespace CMS;

/**
 * This file holds the base class of a shortcode.
 * DO NOT EDIT THIS FILE, it functions as a template.
 */

class ShortCode
{
    public $tag = null; // The actual tag: [like_this]
    public $name = null; // The name of the shortcode. You need to set this in your constructor.
    public $content = null; // The content that is found between tags: [like_this]Content[/like_this]
    protected $attributes = []; // Accepted attributes of your shortcode. You need to set this in your constructor.

    public $dispatcher = null; // 

    /**
     * Inserts the attributes into the shortcode.
     * The attributes will be matched with the attributes set inside your shortcode's constructor.
     * 
     * @param array $attributes An associative array of the attributes you want to insert.
     */
    public function Attributes(array $attributes=[])
    {
        if(count($this->attributes) > 0)
        {
            foreach($attributes as $name => $content)
            {
                if(array_key_exists($name, $this->attributes))
                    $this->attributes[$name] = $content;
            }
        }
    }

    /**
     * Dispatches any shortcodes found within the content of your shortcode.
     * 
     * @return string Returns a string with the parsed content. The string can be empty.
     */
    public function DispatchShortcodesWithinContent()
    {
        $output = $this->content;

        if($this->dispatcher != null)
            $output = $this->dispatcher->Dispatch($output);

        return $output;
    }

    /**
     * Runs the shortcode.
     */
    public function Run()
    {
        // Override this function in your own shortcode implementation.
    }
}